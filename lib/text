import 'package:flutter/material.dart';
import 'package:google_mlkit_face_detection/google_mlkit_face_detection.dart';
import 'coordinates_translator.dart';
import 'package:video_thumbnail/video_thumbnail.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:ui' as ui;
import 'package:image_cropper/image_cropper.dart';
import 'dart:io';

class FaceDetectorPainter extends CustomPainter {
  FaceDetectorPainter(this.faces, this.absoluteImageSize, this.rotation);

  final List<Face> faces;
  final Size absoluteImageSize;
  final InputImageRotation rotation;

  @override
  Future<void> paint(Canvas canvas, Size size) async {
    final Paint paint = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = 1.0
      ..color = Colors.green;

    for (final Face face in faces) {
      canvas.drawRect(
        Rect.fromLTRB(
          translateX(face.boundingBox.left, rotation, size, absoluteImageSize),
          translateY(face.boundingBox.top, rotation, size, absoluteImageSize),
          translateX(face.boundingBox.right, rotation, size, absoluteImageSize),
          translateY(
              face.boundingBox.bottom, rotation, size, absoluteImageSize),
        ),
        paint,
      );
    }

    final croppedImage = await ImageCropper.cropImage(
      imagePath: '',
      aspectRatioPresets: [
        CropAspectRatioPreset.square,
        CropAspectRatioPreset.ratio3x2,
        CropAspectRatioPreset.original,
        CropAspectRatioPreset.ratio4x3,
        CropAspectRatioPreset.ratio16x9
      ],
      androidUiSettings: AndroidUiSettings(
        toolbarTitle: 'Crop Image',
        toolbarColor: Colors.deepOrange,
        toolbarWidgetColor: Colors.white,
        initAspectRatio: CropAspectRatioPreset.original,
        lockAspectRatio: false,
      ),
      iosUiSettings: IOSUiSettings(
        title: 'Crop Image',
      ),
    );

    if (croppedImage != null) {
      await saveImage(croppedImage);
    }
  }

  @override
  bool shouldRepaint(FaceDetectorPainter oldDelegate) {
    return oldDelegate.absoluteImageSize != absoluteImageSize ||
        oldDelegate.faces != faces;
  }
}

Future<void> saveImage(String imagePath) async {
  final directory = await getApplicationDocumentsDirectory();
  final path = '${directory.path}/image.png';
  final file = File(imagePath);

  try {
    await file.copy(path);
    print('Image saved to: $path');
  } catch (e) {
    print('Error while saving image: $e');
  }
}

class VideoThumbnailGenerator {
  static Future<ui.Image> generateThumbnail(String videoPath) async {
    final uint8list = await VideoThumbnail.thumbnailData(
      video: videoPath,
      imageFormat: ImageFormat.JPEG,
      maxWidth: 128,
      quality: 25,
    );
    final codec = await ui.instantiateImageCodec(uint8list!);
    final frame = await codec.getNextFrame();
    return frame.image;
  }
}

class ImageCropper {
  static Future<String?> cropImage({
    String? imagePath,
    required List<CropAspectRatioPreset> aspectRatioPresets,
    required AndroidUiSettings androidUiSettings,
    required IOSUiSettings iosUiSettings,
  }) async {
    final cropper = ImageCropper();
    final croppedFile = await cropper._cropImage(
        imagePath: imagePath,
        aspectRatioPresets: [
          CropAspectRatioPreset.square,
          CropAspectRatioPreset.ratio3x2,
          CropAspectRatioPreset.original,
          CropAspectRatioPreset.ratio4x3,
          CropAspectRatioPreset.ratio16x9
        ],
        androidUiSettings: AndroidUiSettings(
            toolbarTitle: 'Crop Image',
            toolbarColor: Colors.deepOrange,
            toolbarWidgetColor: Colors.white,
            initAspectRatio: CropAspectRatioPreset.original,
            lockAspectRatio: false),
        iosUiSettings:
        IOSUiSettings(title: 'Crop Image', aspectRatioLockEnabled: false));
    print("1###################################################################### $croppedFile");
    return croppedFile;
  }

  Future<String?> _cropImage({
    String? imagePath,
    required List<CropAspectRatioPreset> aspectRatioPresets,
    required AndroidUiSettings androidUiSettings,
    required IOSUiSettings iosUiSettings,
  }) async {
    final croppedFile = await ImageCropper.cropImage(
      imagePath: imagePath,
      aspectRatioPresets: aspectRatioPresets,
      androidUiSettings: androidUiSettings,
      iosUiSettings: iosUiSettings,
    );
    print("2###################################################################### $croppedFile");
    return croppedFile!;
  }
}